import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.pipeline import Pipeline
import nltk
from nltk.corpus import stopwords
from sklearn.model_selection import GridSearchCV
import joblib

nltk.download('stopwords')

def preprocess_text(text):
    stop_words = set(stopwords.words('english'))
    words = text.split()
    words = [word for word in words if word.lower() not in stop_words]
    return ' '.join(words)

data = {
    'text': [
        'I am so happy today!',
        'I feel sad and depressed.',
        'What a wonderful experience!',
        'I am so angry right now.',
        'Feeling excited and joyful!',
        'I am very happy with the results.'
        'I am feeling very sad and lonely.',
        'This is the best day ever!',
        'I am frustrated and upset.',
        'I am overjoyed with happiness.'
    ],
    'emotion': ['happy', 'sad', 'happy', 'angry', 'happy', 'happy', 'sad', 'happy', 'angry', 'happy']
}

df = pd.DataFrame(data)
df['clean_text'] = df['text'].apply(preprocess_text)
X_train, X_test, y_train, y_test = train_test_split(df['clean_text'], df['emotion'], test_size=0.2, random_state=42)

pipeline = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('clf', MultinomialNB())
])

parameters = {
    'tfidf__max_df': [0.8, 0.9, 1.0],
    'tfidf__ngram_range': [(1,1), (1,2)],
    'clf__alpha': [0.1, 0.5, 1.0]
}

grid_search = GridSearchCV(pipeline, parameters, cv=5, n_jobs=-1, verbose=1)
grid_search.fit(X_train, y_train)

best_pipeline = grid_search.best_estimator_
best_pipeline.fit(X_train, y_train)
y_pred = best_pipeline.predict(X_test)

print(f'Akurasi: {accuracy_score(y_test, y_pred)}')
print(classification_report(y_test, y_pred))

joblib.dump(best_pipeline, 'emotion_detection_model.pkl')

def predict_emotion(text):
    model = joblib.load('emotion_detection_model.pkl')
    clean_text = preprocess_text(text)
    prediction = model.predict([clean_text])
    return prediction[0]

new_text = "I am so happy today!"
predicted_emotion = predict_emotion(new_text)
print(f'Teks: "{new_text}"')
print(f'Prediksi Emosi: {predicted_emotion}')
